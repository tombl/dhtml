{"version":3,"file":"shared.min.js","names":[],"sources":["../src/index.ts","../src/shared/lexer.ts","../src/shared.ts"],"sourcesContent":["import { html_tag, is_html } from './shared.ts'\n\nexport interface HTML {\n\t[html_tag]: true\n\t/* @internal */ _statics: TemplateStringsArray\n\t/* @internal */ _dynamics: unknown[]\n}\n\nexport function html(statics: TemplateStringsArray, ...dynamics: unknown[]): HTML {\n\treturn {\n\t\t[html_tag]: true,\n\t\t_dynamics: dynamics,\n\t\t_statics: statics,\n\t}\n}\n\nif (__DEV__) {\n\ttype JsonML = string | readonly [tag: string, attrs?: Record<string, any>, ...children: JsonML[]]\n\tinterface Formatter {\n\t\theader(value: unknown): JsonML | null\n\t\thasBody(value: unknown): boolean\n\t\tbody?(value: unknown): JsonML | null\n\t}\n\n\t;((globalThis as { devtoolsFormatters?: Formatter[] }).devtoolsFormatters ??= []).push({\n\t\theader(value) {\n\t\t\tif (!is_html(value)) return null\n\n\t\t\tconst children: JsonML[] = []\n\t\t\tfor (let i = 0; i < value._dynamics.length; i++)\n\t\t\t\tchildren.push(value._statics[i], ['object', { object: value._dynamics[i] }])\n\t\t\tchildren.push(value._statics[value._statics.length - 1])\n\n\t\t\treturn ['span', {}, 'html`', ...children, '`']\n\t\t},\n\t\thasBody() {\n\t\t\treturn false\n\t\t},\n\t})\n}\n\nexport type { Displayable, Renderable } from './shared.ts'\n","import { assert } from '../shared.ts'\n\nexport const DATA = 0\nexport const TAG_OPEN = 1\nexport const END_TAG_OPEN = 2\nexport const TAG_NAME = 3\nexport const BEFORE_ATTR_NAME = 4\nexport const ATTR_NAME = 5\nexport const AFTER_ATTR_NAME = 6\nexport const BEFORE_ATTR_VALUE = 7\nexport const ATTR_VALUE_DOUBLE_QUOTED = 8\nexport const ATTR_VALUE_SINGLE_QUOTED = 9\nexport const ATTR_VALUE_UNQUOTED = 10\nexport const AFTER_ATTR_VALUE = 11\nexport const SELF_CLOSING_START_TAG = 12\nexport const COMMENT2 = 13 // a comment2 is any type of comment that ends with \">\" and not \"-->\"\nexport const EXCLAIM = 14\nexport const COMMENT = 15\n\nexport type State =\n\t| typeof DATA\n\t| typeof TAG_OPEN\n\t| typeof END_TAG_OPEN\n\t| typeof TAG_NAME\n\t| typeof BEFORE_ATTR_NAME\n\t| typeof ATTR_NAME\n\t| typeof AFTER_ATTR_NAME\n\t| typeof BEFORE_ATTR_VALUE\n\t| typeof ATTR_VALUE_DOUBLE_QUOTED\n\t| typeof ATTR_VALUE_SINGLE_QUOTED\n\t| typeof ATTR_VALUE_UNQUOTED\n\t| typeof AFTER_ATTR_VALUE\n\t| typeof SELF_CLOSING_START_TAG\n\t| typeof COMMENT2\n\t| typeof EXCLAIM\n\t| typeof COMMENT\n\nconst ALPHA = /[a-z]/i\n\nexport function* lex(statics: TemplateStringsArray): Generator<[char: string, state: State], void, void> {\n\tassert(!statics.some(s => s.includes('\\0')))\n\n\tconst input = statics.join('\\0')\n\n\tlet state: State = DATA\n\tlet i = 0\n\n\twhile (i < input.length) {\n\t\tconst c = input[i++]\n\n\t\tswitch (state) {\n\t\t\tcase DATA: // https://html.spec.whatwg.org/multipage/parsing.html#data-state\n\t\t\t\tif (c === '<') state = TAG_OPEN\n\t\t\t\tbreak\n\n\t\t\tcase TAG_OPEN: // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\n\t\t\t\tif (c === '!') state = EXCLAIM\n\t\t\t\telse if (c === '/') state = END_TAG_OPEN\n\t\t\t\telse if (c === '?') state = COMMENT2\n\t\t\t\telse {\n\t\t\t\t\tstate = TAG_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase END_TAG_OPEN: // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\n\t\t\t\tif (c === '>') state = DATA\n\t\t\t\telse if (ALPHA.test(c)) {\n\t\t\t\t\tstate = TAG_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tstate = COMMENT2\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase TAG_NAME: // https://html.spec.whatwg.org/multipage/parsing.html#tag-name-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') state = BEFORE_ATTR_NAME\n\t\t\t\telse if (c === '/') state = SELF_CLOSING_START_TAG\n\t\t\t\telse if (c === '>') state = DATA\n\t\t\t\tbreak\n\n\t\t\tcase BEFORE_ATTR_NAME: // https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') {\n\t\t\t\t} else if (c === '/' || c === '>') {\n\t\t\t\t\tstate = AFTER_ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tstate = ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase ATTR_NAME: // https://html.spec.whatwg.org/multipage/parsing.html#attribute-name-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ' || c === '/' || c === '>') {\n\t\t\t\t\tstate = AFTER_ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t} else if (c === '=') state = BEFORE_ATTR_VALUE\n\t\t\t\tbreak\n\n\t\t\tcase AFTER_ATTR_NAME: // https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-name-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') {\n\t\t\t\t} else if (c === '/') state = SELF_CLOSING_START_TAG\n\t\t\t\telse if (c === '=') state = BEFORE_ATTR_VALUE\n\t\t\t\telse if (c === '>') state = DATA\n\t\t\t\telse {\n\t\t\t\t\tstate = ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase BEFORE_ATTR_VALUE: // https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-value-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') {\n\t\t\t\t} else if (c === '\"') state = ATTR_VALUE_DOUBLE_QUOTED\n\t\t\t\telse if (c === \"'\") state = ATTR_VALUE_SINGLE_QUOTED\n\t\t\t\telse if (c === '>') state = DATA\n\t\t\t\telse {\n\t\t\t\t\tstate = ATTR_VALUE_UNQUOTED\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase ATTR_VALUE_DOUBLE_QUOTED: // https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(double-quoted)-state\n\t\t\t\tif (c === '\"') state = AFTER_ATTR_VALUE\n\t\t\t\tbreak\n\n\t\t\tcase ATTR_VALUE_SINGLE_QUOTED: // https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(single-quoted)-state\n\t\t\t\tif (c === \"'\") state = AFTER_ATTR_VALUE\n\t\t\t\tbreak\n\n\t\t\tcase ATTR_VALUE_UNQUOTED: // https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(unquoted)-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') state = BEFORE_ATTR_NAME\n\t\t\t\telse if (c === '>') state = DATA\n\t\t\t\tbreak\n\n\t\t\tcase AFTER_ATTR_VALUE: // https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-value-(quoted)-state\n\t\t\t\tif (c === '\\t' || c === '\\n' || c === '\\f' || c === ' ') state = BEFORE_ATTR_NAME\n\t\t\t\telse if (c === '/') state = SELF_CLOSING_START_TAG\n\t\t\t\telse if (c === '>') state = DATA\n\t\t\t\telse {\n\t\t\t\t\tstate = BEFORE_ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase SELF_CLOSING_START_TAG: // https://html.spec.whatwg.org/multipage/parsing.html#self-closing-start-tag-state\n\t\t\t\tif (c === '>') state = DATA\n\t\t\t\telse {\n\t\t\t\t\tstate = BEFORE_ATTR_NAME\n\t\t\t\t\ti--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase COMMENT2: // https://html.spec.whatwg.org/multipage/parsing.html#bogus-comment-state\n\t\t\t\tif (c === '>') state = DATA\n\t\t\t\tbreak\n\n\t\t\tcase EXCLAIM: // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\n\t\t\t\tif (c === '-' && input[i] === '-') {\n\t\t\t\t\ti++\n\t\t\t\t\tyield ['-', COMMENT]\n\t\t\t\t\tstate = COMMENT\n\t\t\t\t} else {\n\t\t\t\t\tstate = COMMENT2\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tcase COMMENT: // https://html.spec.whatwg.org/multipage/parsing.html#comment-state\n\t\t\t\tif (c === '-' && input[i] === '-' && input[i + 1] === '>') {\n\t\t\t\t\tyield ['-', COMMENT]\n\t\t\t\t\ti++\n\t\t\t\t\tyield ['-', COMMENT]\n\t\t\t\t\ti++\n\t\t\t\t\tyield ['>', COMMENT]\n\t\t\t\t\tstate = DATA\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tstate satisfies never\n\t\t}\n\n\t\tyield [c, state]\n\t}\n}\n","import { html, type HTML } from './index.ts'\nexport * as lexer from './shared/lexer.ts'\n\n/** @internal */\ndeclare global {\n\tvar __DEV__: boolean\n}\n\nexport interface ToString {\n\ttoString(): string\n}\n\nexport type Displayable = null | undefined | ToString | Node | Renderable | Iterable<Displayable> | HTML\nexport interface Renderable {\n\trender(): Displayable\n}\n\nexport function is_renderable(value: unknown): value is Renderable {\n\treturn typeof value === 'object' && value !== null && 'render' in value\n}\n\nexport function is_iterable(value: unknown): value is Iterable<unknown> {\n\treturn typeof value === 'object' && value !== null && Symbol.iterator in value\n}\n\nexport function assert(value: unknown, message?: string): asserts value {\n\tif (!__DEV__) return\n\tif (!value) {\n\t\tconst error = new Error(message ?? 'assertion failed')\n\t\tError.captureStackTrace?.(error, assert) // remove assert from the stack trace\n\t\tthrow error\n\t}\n}\n\nexport const html_tag: unique symbol = Symbol()\nexport function is_html(value: unknown): value is HTML {\n\treturn typeof value === 'object' && value !== null && html_tag in value\n}\n\nexport function single_part_template(part: Displayable): HTML {\n\treturn html`${part}`\n}\n"],"mappings":"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"}