import { b as e, f as i, d as n, e as r, c as t } from './shared.min.js'
const a = /\s/,
	o = new WeakMap()
function s(e, t) {
	return !1 === t || t === null || typeof t == `function` ? `` : !0 === t ? e : `${e}="${d(t)}"`
}
function* c(l) {
	if ((yield `<?[>`, n(l))) {
		try {
			l = l.render()
		} catch (t) {
			if (!e(t)) throw t
			l = t
		}
		n(l) && (l = r(l))
	}
	if (t(l)) for (let e of l) yield* c(e)
	else if (e(l)) {
		let { N: e, T: t } = l,
			n = (function (e) {
				let t = o.get(e)
				if (t) return t
				let n = { source: e.join(`\0`), parts: [], extra_parts: 0 },
					r,
					l,
					u = 0,
					d = 0,
					f = 0,
					p = ``
				function m() {
					;(f > 1 && (n.extra_parts++, n.parts.push({ replace_start: u - f, replace_end: u, render: () => ` ` })),
						(f = 0))
				}
				for (let [t, o] of i(e)) {
					if ((o === 5 && (r !== 5 && ((p = ``), (l = u)), (p += t)), o === 0 && a.test(t) ? f++ : m(), t === `\0`)) {
						let e = d++
						switch (o) {
							case 0:
							case 15:
							case 13:
								n.parts.push({ replace_start: u, replace_end: u + 1, render: t => c(t[e]) })
								break
							case 10:
							case 8:
							case 9:
								let t = p
								n.parts.push({ replace_start: l, replace_end: u + 1 + (o === 10 ? 0 : 1), render: n => s(t, n[e]) })
								break
							case 5:
								n.parts.push({ replace_start: u, replace_end: u + 1, render: t => (t[e], ``) })
						}
					}
					;((r = o), u++)
				}
				return (m(), o.set(e, n), n)
			})(e),
			r = 0
		for (let { replace_start: e, replace_end: i, render: a } of n.parts)
			(yield n.source.slice(r, e), yield* a(t), (r = i))
		yield n.source.slice(r)
	} else l !== null && (yield d(l))
	yield `<?]>`
}
const l = /[&<>"']/g,
	u = { '&': `&amp;`, '<': `&lt;`, '>': `&gt;`, '"': `&quot;`, "'": `&#39;` }
function d(e) {
	return String(e).replace(l, e => u[e])
}
function f(e) {
	let t = ``
	for (let n of c(e)) t += n
	return t
}
function p(e) {
	let t = c(e)
	return new ReadableStream({
		pull(e) {
			let { done: n, value: r } = t.next()
			n ? e.close() : e.enqueue(r)
		},
	}).pipeThrough(new TextEncoderStream())
}
export { p as renderToReadableStream, f as renderToString }
