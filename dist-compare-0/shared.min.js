function e(e, ...t) {
	return { [a]: !0, T: t, N: e }
}
const t = /[a-z]/i
function* n(e) {
	let n = e.join(`\0`),
		r = 0,
		i = 0
	for (; i < n.length; ) {
		let e = n[i++]
		switch (r) {
			case 0:
				e === `<` && (r = 1)
				break
			case 1:
				if (e === `!`) r = 14
				else if (e === `/`) r = 2
				else {
					if (e !== `?`) {
						;((r = 3), i--)
						continue
					}
					r = 13
				}
				break
			case 2:
				if (e !== `>`) {
					if (t.test(e)) {
						;((r = 3), i--)
						continue
					}
					;((r = 13), i--)
					continue
				}
				r = 0
				break
			case 3:
				e === `	` ||
				e ===
					`
` ||
				e === `\f` ||
				e === ` `
					? (r = 4)
					: e === `/`
						? (r = 12)
						: e === `>` && (r = 0)
				break
			case 4:
				if (
					e !== `	` &&
					e !==
						`
` &&
					e !== `\f` &&
					e !== ` `
				) {
					if (e === `/` || e === `>`) {
						;((r = 6), i--)
						continue
					}
					;((r = 5), i--)
					continue
				}
				break
			case 5:
				if (
					e === `	` ||
					e ===
						`
` ||
					e === `\f` ||
					e === ` ` ||
					e === `/` ||
					e === `>`
				) {
					;((r = 6), i--)
					continue
				}
				e === `=` && (r = 7)
				break
			case 6:
				if (
					!(
						e === `	` ||
						e ===
							`
` ||
						e === `\f` ||
						e === ` `
					)
				)
					if (e === `/`) r = 12
					else if (e === `=`) r = 7
					else {
						if (e !== `>`) {
							;((r = 5), i--)
							continue
						}
						r = 0
					}
				break
			case 7:
				if (
					!(
						e === `	` ||
						e ===
							`
` ||
						e === `\f` ||
						e === ` `
					)
				)
					if (e === `"`) r = 8
					else if (e === `'`) r = 9
					else {
						if (e !== `>`) {
							;((r = 10), i--)
							continue
						}
						r = 0
					}
				break
			case 8:
				e === `"` && (r = 11)
				break
			case 9:
				e === `'` && (r = 11)
				break
			case 10:
				e === `	` ||
				e ===
					`
` ||
				e === `\f` ||
				e === ` `
					? (r = 4)
					: e === `>` && (r = 0)
				break
			case 11:
				if (
					e === `	` ||
					e ===
						`
` ||
					e === `\f` ||
					e === ` `
				)
					r = 4
				else if (e === `/`) r = 12
				else {
					if (e !== `>`) {
						;((r = 4), i--)
						continue
					}
					r = 0
				}
				break
			case 12:
				if (e !== `>`) {
					;((r = 4), i--)
					continue
				}
				r = 0
				break
			case 13:
				e === `>` && (r = 0)
				break
			case 14:
				e === `-` && n[i] === `-` ? (i++, yield [`-`, 15], (r = 15)) : (r = 13)
				break
			case 15:
				if (e === `-` && n[i] === `-` && n[i + 1] === `>`) {
					;(yield [`-`, 15], i++, yield [`-`, 15], i++, yield [`>`, 15], (r = 0))
					continue
				}
		}
		yield [e, r]
	}
}
function r(e) {
	return typeof e == `object` && !!e && `render` in e
}
function i(e) {
	return typeof e == `object` && !!e && Symbol.iterator in e
}
const a = Symbol()
function o(e) {
	return typeof e == `object` && !!e && a in e
}
function s(t) {
	return e`${t}`
}
export { o as b, i as c, r as d, s as e, n as f, e as g }
